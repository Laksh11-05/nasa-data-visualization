{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5001/api/nasa'; // Adjust if your backend URL changes\n\n// Astronomy Picture of the Day (APOD)\nexport const getApod = async date => {\n  try {\n    const params = date ? {\n      date\n    } : {};\n    const response = await axios.get(`${API_URL}/apod`, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching APOD:', error);\n    throw error;\n  }\n};\n\n// Mars Rover Photos\nexport const getMarsPhotos = async (rover, sol) => {\n  try {\n    const response = await axios.get(`${API_URL}/mars-photos`, {\n      params: {\n        rover,\n        sol\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching Mars photos:', error);\n    throw error;\n  }\n};\n\n// Earth Polychromatic Imaging Camera (EPIC)\nexport const getEpic = async date => {\n  try {\n    const params = date ? {\n      date\n    } : {};\n    const response = await axios.get(`${API_URL}/epic`, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching EPIC data:', error);\n    throw error;\n  }\n};\n\n// Near Earth Object Web Service (NeoWs)\nexport const getNeoWs = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/neo`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching NEO data:', error);\n    throw error;\n  }\n};\n\n// NASA Image and Video Library\nexport const searchNasaImages = async query => {\n  try {\n    const response = await axios.get(`${API_URL}/images`, {\n      params: {\n        q: query\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error searching NASA images:', error);\n    throw error;\n  }\n};\n\n// Importing the functions in another file\n// import { getApod, getMarsPhotos, getEpic, getNeoWs, searchNasaImages } from './services/apiService';","map":{"version":3,"names":["axios","API_URL","getApod","date","params","response","get","data","error","console","getMarsPhotos","rover","sol","getEpic","getNeoWs","searchNasaImages","query","q"],"sources":["C:/Users/user/OneDrive/Desktop/bounce insights/nasa-data-visualization/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5001/api/nasa'; // Adjust if your backend URL changes\n\n// Astronomy Picture of the Day (APOD)\nexport const getApod = async (date) => {\n    try {\n        const params = date ? { date } : {};\n        const response = await axios.get(`${API_URL}/apod`, { params });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching APOD:', error);\n        throw error;\n    }\n};\n\n// Mars Rover Photos\nexport const getMarsPhotos = async (rover, sol) => {\n    try {\n        const response = await axios.get(`${API_URL}/mars-photos`, {\n            params: { rover, sol }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching Mars photos:', error);\n        throw error;\n    }\n};\n\n// Earth Polychromatic Imaging Camera (EPIC)\nexport const getEpic = async (date) => {\n    try {\n        const params = date ? { date } : {};\n        const response = await axios.get(`${API_URL}/epic`, { params });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching EPIC data:', error);\n        throw error;\n    }\n};\n\n// Near Earth Object Web Service (NeoWs)\nexport const getNeoWs = async () => {\n    try {\n        const response = await axios.get(`${API_URL}/neo`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching NEO data:', error);\n        throw error;\n    }\n};\n\n// NASA Image and Video Library\nexport const searchNasaImages = async (query) => {\n    try {\n        const response = await axios.get(`${API_URL}/images`, {\n            params: { q: query }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error searching NASA images:', error);\n        throw error;\n    }\n};\n\n// Importing the functions in another file\n// import { getApod, getMarsPhotos, getEpic, getNeoWs, searchNasaImages } from './services/apiService';"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gCAAgC,CAAC,CAAC;;AAElD;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOC,IAAI,IAAK;EACnC,IAAI;IACA,MAAMC,MAAM,GAAGD,IAAI,GAAG;MAAEA;IAAK,CAAC,GAAG,CAAC,CAAC;IACnC,MAAME,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,OAAO,EAAE;MAAEG;IAAO,CAAC,CAAC;IAC/D,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOC,KAAK,EAAEC,GAAG,KAAK;EAC/C,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,cAAc,EAAE;MACvDG,MAAM,EAAE;QAAEO,KAAK;QAAEC;MAAI;IACzB,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,OAAO,GAAG,MAAOV,IAAI,IAAK;EACnC,IAAI;IACA,MAAMC,MAAM,GAAGD,IAAI,GAAG;MAAEA;IAAK,CAAC,GAAG,CAAC,CAAC;IACnC,MAAME,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,OAAO,EAAE;MAAEG;IAAO,CAAC,CAAC;IAC/D,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,MAAM,CAAC;IAClD,OAAOI,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMO,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC7C,IAAI;IACA,MAAMX,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,SAAS,EAAE;MAClDG,MAAM,EAAE;QAAEa,CAAC,EAAED;MAAM;IACvB,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}